'use client';

import { createContext, useContext, useEffect, useState } from 'react';
import { supabase } from '../lib/supabaseClient';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(() => {
    // Charger imm√©diatement depuis localStorage si dispo, uniquement dans le navigateur
    if (typeof window !== 'undefined') {
      const storedUser = localStorage.getItem('user');
      return storedUser ? JSON.parse(storedUser) : null;
    }
    return null;
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const getUserData = async () => {
      const { data } = await supabase.auth.getUser(); // R√©cup√®re l'utilisateur actuel depuis Supabase
      if (data?.user) {
        setUser(data.user); // Si un utilisateur est trouv√©, on le met dans l'√©tat
        if (typeof window !== 'undefined') {
          localStorage.setItem('user', JSON.stringify(data.user)); // üî• Mettre √† jour localStorage
        }
      } else {
        setUser(null); // Si aucun utilisateur n'est trouv√©, on le retire de l'√©tat
        if (typeof window !== 'undefined') {
          localStorage.removeItem('user'); // üî• Nettoyer si pas d'user
        }
      }
      setLoading(false); // Une fois qu'on a r√©cup√©r√© les donn√©es, on n'est plus en chargement
    };

    getUserData(); // Chargement des donn√©es utilisateur initiales

    // Ecouter les changements d'√©tat d'authentification
    const { data: listener } = supabase.auth.onAuthStateChange((_event, session) => {
      if (session?.user) {
        setUser(session.user); // Si l'utilisateur est connect√©
        if (typeof window !== 'undefined') {
          localStorage.setItem('user', JSON.stringify(session.user)); // üî• Mise √† jour sur auth change
        }
      } else {
        setUser(null); // Sinon, on d√©connecte l'utilisateur
        if (typeof window !== 'undefined') {
          localStorage.removeItem('user'); // üî• Nettoyer
        }
      }
    });

    // Cleanup lors de la destruction du composant
    return () => listener?.subscription?.unsubscribe();
  }, []);

  const login = async (email, password) => {
    const { data, error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) throw error; // Si une erreur survient, on la lance
    setUser(data.user); // Si connexion r√©ussie, on met l'utilisateur dans l'√©tat
    if (typeof window !== 'undefined') {
      localStorage.setItem('user', JSON.stringify(data.user)); // üî• Stocker apr√®s login
    }
  };

  const logout = async () => {
    await supabase.auth.signOut(); // Se d√©connecter via Supabase
    setUser(null); // R√©initialiser l'√©tat de l'utilisateur
    if (typeof window !== 'undefined') {
      localStorage.removeItem('user'); // üî• Nettoyer apr√®s logout
    }
  };

  return (
    <AuthContext.Provider value={{ user, login, logout, loading, setUser }}>
      {!loading && children} {/* Afficher les enfants seulement lorsque le chargement est termin√© */}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext); // Hook pour acc√©der au contexte
"use client";
import { createContext, useContext, useEffect, useState } from 'react';
import { supabase } from '../lib/supabaseClient'; // Assurez-vous que le chemin est correct

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(() => {
    // Charger immÃ©diatement depuis localStorage si dispo
    const storedUser = localStorage.getItem('user');
    return storedUser ? JSON.parse(storedUser) : null;
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const getUserData = async () => {
      const { data } = await supabase.auth.getUser(); // RÃ©cupÃ¨re l'utilisateur actuel depuis Supabase
      if (data?.user) {
        setUser(data.user); // Si un utilisateur est trouvÃ©, on le met dans l'Ã©tat
        localStorage.setItem('user', JSON.stringify(data.user)); // ğŸ”¥ Mettre Ã  jour localStorage
      } else {
        setUser(null); // Si aucun utilisateur n'est trouvÃ©, on le retire de l'Ã©tat
        localStorage.removeItem('user'); // ğŸ”¥ Nettoyer si pas d'user
      }
      setLoading(false); // Une fois qu'on a rÃ©cupÃ©rÃ© les donnÃ©es, on n'est plus en chargement
    };

    getUserData(); // Chargement des donnÃ©es utilisateur initiales

    // Ecouter les changements d'Ã©tat d'authentification
    const { data: listener } = supabase.auth.onAuthStateChange((_event, session) => {
      if (session?.user) {
        setUser(session.user); // Si l'utilisateur est connectÃ©
        localStorage.setItem('user', JSON.stringify(session.user)); // ğŸ”¥ Mise Ã  jour sur auth change
      } else {
        setUser(null); // Sinon, on dÃ©connecte l'utilisateur
        localStorage.removeItem('user'); // ğŸ”¥ Nettoyer
      }
    });

    // Cleanup lors de la destruction du composant
    return () => listener?.subscription?.unsubscribe();
  }, []);

  const login = async (email, password) => {
    const { data, error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) throw error; // Si une erreur survient, on la lance
    setUser(data.user); // Si connexion rÃ©ussie, on met l'utilisateur dans l'Ã©tat
    localStorage.setItem('user', JSON.stringify(data.user)); // ğŸ”¥ Stocker aprÃ¨s login
  };

  const logout = async () => {
    await supabase.auth.signOut(); // Se dÃ©connecter via Supabase
    setUser(null); // RÃ©initialiser l'Ã©tat de l'utilisateur
    localStorage.removeItem('user'); // ğŸ”¥ Nettoyer aprÃ¨s logout
  };

  return (
    <AuthContext.Provider value={{ user, login, logout, loading, setUser }}>
      {!loading && children} {/* Afficher les enfants seulement lorsque le chargement est terminÃ© */}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext); // Hook pour accÃ©der au contexte